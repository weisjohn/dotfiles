#!/bin/bash

# Git functions
function gc() {
	# commit and set message
	git commit -m "$@"
}

function gcs() {
    # signed commit and set message
    git commit -S -m "$@"
}

function ga() {
	# add a path
	git add $@
}

function gm() {
	git merge --no-ff $@
}

# https://gist.github.com/schacon/942899
# git(1) - remove merged branches
# requires https://github.com/tj/git-extras
function grmb() {
  git branch -r --merged origin/master |
  grep origin |
  grep -v master |
  grep -v develop |
  awk '{sub(/origin\//,"");print}' |
  xargs git delete-branch
}

# https://github.com/holman/spark/wiki/Wicked-Cool-Usage
# Histogram of commits throughout the day by author
function gg() {
	git log --pretty=format:'%an: %at' --author="$@" |
    awk '{system("date -r "$NF" '+%H'")}' |
    sort |
    uniq -c |
    ruby -e 'puts STDIN.readlines.inject(Hash[Array("00".."23").map{|x| [x,0]}]) {|h, x| h.merge(Hash[*x.split(" ").reverse])}.sort.map(&:last)' |
    spark
}

# https://github.com/holman/spark/wiki/Wicked-Cool-Usage
# git commits for the last two weeks
function g2w() {
	for day in $(seq 14 -1 0); do
    	git log --before="${day} days" --after="$[${day}+1] days" --format=oneline |
    wc -l
	done | spark
}

# today's activity
function gday() {
	for hour in $(seq 8 -1 0); do
    	git log --author "$@" --before="${hour} hours" --after="$[${hour}+1] hours" --format=oneline |
    	wc -l;
	done | spark
}

function gct() {
    now=`date +%s`
    last_commit=`git log --pretty=format:'%at' -1`
    seconds_since_last_commit=$((now-last_commit))
    minutes_since_last_commit=$((seconds_since_last_commit/60))
    echo $minutes_since_last_commit "minutes"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8888}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}


function sms() {
	echo "$@" | mail 9373079375@vtext.com
}


# start weinre and accept a port
function weinre() {
	local host="${1:-8888}"
	node /usr/local/lib/node_modules/weinre/weinre --boundHost=$host
}

# scp the image up to my server in the sky
function mi() {
    chmod 644 "$@"
    scp "$@" sonlite:/home/sonlite/webapps/www_img/.
    rm "$@"
}

function instagram() {
    rsync -az /Users/jweis/Dropbox/ifttt/instagram/* sonlite:/home/sonlite/webapps/www_img/instagram
}

function motivate() {
    chmod 644 "$@"
    scp "$@" sonlite:/home/sonlite/webapps/www_img/motivate/.
    rm "$@"
}

# move an entire folder up to the sky
function mi-dir() {
    ssh sonlite mkdir -p /home/sonlite/webapps/www_img/$@
    scp -r "$@" sonlite:/home/sonlite/webapps/www_img
}



# hex to decimal
function h2d() {
  echo "ibase=16; $@"|bc
}

# decimal to hex
function d2h() {
  echo "obase=16; $@"|bc
}


# resolve SSH hostname entries to IP addresses
function resolve() {
    #cat /etc/hosts | grep $@
    #cat ~/.ssh/config | grep $@
    linenum=`grep -n $@ ~/.ssh/config |cut -f1 -d:`
    linenum=$((linenum+1))
    echo `sed -n ${linenum}p ~/.ssh/config`
}

# discover IP addresses to SSH hostnames
function discover() {
    #cat /etc/hosts | grep $@
    #cat ~/.ssh/config | grep $@
    linenum=`grep -n $@ ~/.ssh/config |cut -f1 -d:`
    linenum=$((linenum-1))
    echo `sed -n ${linenum}p ~/.ssh/config`
}


function new_term() {
    TERM_PATH=`pwd`

    if [ $# -eq 1 ]; then
        NEW_CMD=$1
    else
        NEW_CMD="clear"
    fi

    export TERM_PATH
    export NEW_CMD

    bash -c '
    /usr/bin/osascript <<EOF
    activate application "Terminal"
    tell application "System Events"
        keystroke "t" using {command down}
    end tell
    tell application "Terminal"
        repeat with win in windows
            try
                if get frontmost of win is true then
                    do script "cd $TERM_PATH; $NEW_CMD;" in (selected tab of win)
                end if
            end try
        end repeat
    end tell
EOF' 2>&1 >> /dev/null
}

function dev() {

    if [ $# -eq 1 ]; then
        _z 2>&1 $1
    fi

    dev_conf=`pwd`/.dev
    if [ ! -f $dev_conf ]; then
        echo "no devconf found"
        commands=("node-dev . | bunyan" "git pull && git status && subl .")
    else
        commands=$(cat dev_conf)
    fi

    for ix in ${!commands[*]}; do
        cmd=${commands[ix]}
        echo $cmd
        new_term "$cmd"
    done
}

function zfind() {
    if [ $# -ne 1 ]; then
        echo "one destination only"
        return
    fi

    # sort of hacky
    here=`pwd`
    _z "$1"
    there=`pwd`
    cd $here

    echo $there

}


# simple thing to get me to journal more
function yesterday() {
    monthpath="$MYSRC/weisjohn/journal/"$(date -v -1d "+%Y/%m/")
    mkdir -p $monthpath
    cd $monthpath
    filename=$(date -v -1d "+%d.md")
    touch $filename
    $EDITOR $filename
}

function today() {
    monthpath="$MYSRC/weisjohn/journal/"$(date "+%Y/%m/")
    mkdir -p $monthpath
    cd $monthpath
    filename=$(date "+%d.md")
    touch $filename
    $EDITOR $filename
}

function tomorrow() {
    monthpath="$MYSRC/weisjohn/journal/"$(date -v +1d "+%Y/%m/")
    mkdir -p $monthpath
    cd $monthpath
    filename=$(date -v +1d "+%d.md")
    touch $filename
    $EDITOR $filename
}

function day() {
    echo $(date +"%j")
}


# golang
function gdoc() {
    godoc $1 | pygmentize -O style=solarized -f console256 -g
}


# base64 encode an image onto your clipboard
function b64() {
    openssl base64 -in $1 | pbcopy
    # TODO: this comes out all gross like, pull the strings together and make it awesome
}

# requires `brew install fswatch`
function filewatch() {
	fswatch $1 | xargs -n1 -I{} ./$1
}

## port listen detector
function listening() {
	lsof -i :$1
}

## function integration for alias
colorssh() {
    trap "colorterm" INT EXIT
    if [[ "$*" =~ "prod" ]]; then
        colorterm prod
    elif [[ "$*" =~ "stage" ]]; then
        colorterm dev
    elif [[ "$*" =~ "dev" ]]; then
        colorterm dev
    else
        colorterm dev
    fi
    /usr/bin/ssh "$@"
    colorterm
}

## start writing a mark down note in this directory prefixed by today's date
function note() {
    file="$(date +%Y.%m.%d)"
    if [[ $1 != "" ]]; then
        file=$file.$(slugify "$1")
    fi
    file="$file.md"
    touch $file
    if [[ $1 != "" ]]; then
        echo "# $1" >> $file
    fi
    $EDITOR $file
}

## docker cleanup
function dclean() {
    # remove exited containers
    docker rm $(docker ps -a -f status=exited -q)
    # remove dangling images
    docker images -f dangling=true | grep 'none' | awk '{print $3}' | xargs docker rmi
    # remove images that are super old, sometimes fails
    docker images | grep 'months' | awk '{print $3}' | xargs docker rmi
}

function trim() {
    awk '{gsub(/^ +| +$/,"")} {print $0}' | tr -d '\n'
}

function payout() {
    url="https://p5.minexmr.com/get_wid_stats?address=$MONERO_PUBLIC"
    bal=$(curl $url -s | jq -r '.[1].balance')
    node -e "console.log(\`\${$bal / 1e12} XMR\`)"

    oxr="https://openexchangerates.org/api/latest.json?app_id=$OXR_API_KEY&only_alternative=true"
    xmr=$(curl $oxr -s | jq -r '.rates.XMR')
    node -e "console.log(\`\${(($bal / 1e12) * 1 / $xmr).toFixed(3)} USD\`)"
}

# create a gist from a file
# TODO: add a directory
function gist() {
    arg=$1
    if [ -z $GITHUB_AUTH_TOKEN ]; then
        echo "gist: GITHUB_AUTH_TOKEN not set"
        return 1
    fi
    if [ ! -e $arg ]; then
        echo "gist: $arg: No such file or directory"
        return 255
    fi
    if [ -f $arg ]; then
        escaped=$(cat $arg | sed ':a;N;$!ba;s/\n/\\n/g')
        # echo "$escaped"
        file="\"$arg\":{\"content\":\"$escaped\"}"
        # echo "$file"
        data="{\"public\":true,\"files\":{$file}}"
        # echo $data | jq '.'
        out=$(curl -v -X POST -d "$data" \
            -H "Content-Type: application/json" \
            -H "Authorization: token $GITHUB_AUTH_TOKEN" \
            https://api.github.com/gists)
        if [ $? -eq 0 ]; then
            open $(echo $out | jq -r '.html_url')
        fi
    fi
}

# inspect aws configuration
function aws-whoami() {
    user=$(aws iam get-user)
    aliases=$(aws iam list-account-aliases)
    echo "$user $aliases" | jq '. | add'
}

# open Firefox preferences and setup a SSH Tunnel to use as a socks proxy
# $1 - ssh host value (alias)
function socks() {
    /Applications/Firefox.app/Contents/MacOS/firefox -preferences &
    ssh -D 9999 -q -C $1
}

# https://gist.github.com/earthgecko/3089509#gistcomment-1623399
function randomAlphaNumeric() {
  len=${1:-"16"}
  perl -e "@c=(\"A\"..\"Z\",\"a\"..\"z\",0..9);\$p.=\$c[rand(scalar @c)] for 1..$len; print \"\$p\""
}

function hasNewline() {
  if [ $(echo "$1" | wc -l) -gt 1 ]; then
    return
  else
    return 1
  fi
}

function randomHex() {
  len=${1:-"32"}
  perl -e "@c=(\"a\"..\"f\",0..9);\$p.=\$c[rand(scalar @c)] for 1..$len; print \"\$p\""
}

# https://stackoverflow.com/a/3800791/87960
function csv() {
  column -s, -t < $1 | cat
}

function op_csv() {
    if [ -z "$1" ]; then
        echo "failed to send a vault name"
        return 0
    fi
    # name of vault to try
    vault="$1"
    # mapping to use, for tersity
    mapping="{ created: .createdAt, updated: .updatedAt, title: .overview.title, url: .overview.url }"

    # call to op:
    items=$(op list items --vault $vault)
    if [ $? -ne 0 ]; then
        echo "error calling op(1)"
    fi

    # info for debugging purposes
    uuid=$(op list vaults | jq -r ".[] | select(.name==\"$vault\") | .uuid")
    count=$(echo "$items" | jq -r '.[].overview.url' | wc -l)
    echo -e "valut:\t$vault\nuuid:\t$uuid\ncount:\t$count" | column -t

    # sorted
    sorted=$(echo "$items" | jq -r "sort_by(.overview.title)")

    # get all of items in the vault out to CSV:
    echo "$sorted" | jq -r ".[] | $mapping | [.title,.created,.updated,.url] | @csv" > $vault.csv
}
